//Created by Tim Gass, John Thompson and Zach Reiss For CSC332-Cryptology
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csc332;

import java.awt.Color;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author Tim
 */
public class guiJFrame extends javax.swing.JFrame {

    private static String yourEmail;
    private static String pass;
    private static String toEmail;
    private static String subject;
    private static String message;
    private static final String key = "%;/m2aT?sU_)A6|%";
    private static final String initVector = "cd+u\"G},;aoo5`5U";
    private static ArrayList<Message> messageList = new <Message>ArrayList();
    private static ArrayList<String> stringList = new <String>ArrayList();
    private static ArrayList<String> texts = new <String>ArrayList();

    /**
     * Creates new form guiJFrame
     */
    public guiJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startPanel = new javax.swing.JPanel();
        login = new javax.swing.JButton();
        email = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        bgOswego = new javax.swing.JLabel();
        sendPopup = new javax.swing.JOptionPane();
        sendPopup.setVisible(false);
        sendPanel = new javax.swing.JPanel();
        targetEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        subjectTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sendMessage = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        inboxPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        welcomeMsg = new javax.swing.JLabel();
        compose = new javax.swing.JButton();
        logOut = new javax.swing.JButton();
        recievePanel = new javax.swing.JPanel();
        fromEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fromSubject = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fromMessage = new javax.swing.JTextArea();
        reply = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        startPanel.setLayout(null);

        login.setBackground(new java.awt.Color(102, 102, 102));
        login.setText("Log In");
        login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginMouseClicked(evt);
            }
        });
        startPanel.add(login);
        login.setBounds(270, 170, 63, 23);

        email.setBackground(new java.awt.Color(255, 255, 204));
        email.setText("Email");
        email.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailClicked(evt);
            }
        });
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailTyped(evt);
            }
        });
        startPanel.add(email);
        email.setBounds(60, 120, 210, 30);

        jLabel1.setText("<html>\n   <center>Created by:\n   <center>Tim Gass, John Thompson, and Zach Reiss\n   <center>For CSC332 Cryptology\n   <center>©2018\n</html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        startPanel.add(jLabel1);
        jLabel1.setBounds(360, 330, 250, 90);

        jPasswordField1.setBackground(new java.awt.Color(255, 255, 204));
        jPasswordField1.setText("Password");
        jPasswordField1.setToolTipText("");
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabbedIntoPass(evt);
            }
        });
        jPasswordField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passBoxClicked(evt);
            }
        });
        startPanel.add(jPasswordField1);
        jPasswordField1.setBounds(330, 120, 210, 30);

        bgOswego.setIcon(new javax.swing.ImageIcon(getClass().getResource("/csc332/oswego2.jpg"))); // NOI18N
        startPanel.add(bgOswego);
        bgOswego.setBounds(0, 0, 610, 420);
        startPanel.add(sendPopup);
        sendPopup.setBounds(380, 0, 262, 90);

        sendPanel.setVisible(false);
        sendPanel.setLayout(null);
        sendPanel.add(targetEmail);
        targetEmail.setBounds(109, 11, 430, 30);
        targetEmail.getAccessibleContext().setAccessibleName("");

        jLabel2.setText("To:");
        sendPanel.add(jLabel2);
        jLabel2.setBounds(25, 11, 66, 26);
        sendPanel.add(subjectTxt);
        subjectTxt.setBounds(109, 51, 430, 30);

        jLabel3.setText("Subject:");
        sendPanel.add(jLabel3);
        jLabel3.setBounds(25, 48, 66, 26);

        sendMessage.setColumns(20);
        sendMessage.setRows(5);
        jScrollPane1.setViewportView(sendMessage);

        sendPanel.add(jScrollPane1);
        jScrollPane1.setBounds(25, 103, 560, 230);

        sendButton.setText("Send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendClicked(evt);
            }
        });
        sendPanel.add(sendButton);
        sendButton.setBounds(30, 360, 87, 32);

        cancelButton.setText("Cancel");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelSendClicked(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        sendPanel.add(cancelButton);
        cancelButton.setBounds(130, 360, 87, 32);

        inboxPanel.setVisible(false);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        welcomeMsg.setText("Welcome");

        compose.setText("Compose");
        compose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                composeClicked(evt);
            }
        });

        logOut.setText("Log Out");
        logOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutClicked(evt);
            }
        });

        javax.swing.GroupLayout inboxPanelLayout = new javax.swing.GroupLayout(inboxPanel);
        inboxPanel.setLayout(inboxPanelLayout);
        inboxPanelLayout.setHorizontalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(inboxPanelLayout.createSequentialGroup()
                        .addGroup(inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inboxPanelLayout.createSequentialGroup()
                                .addComponent(compose, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(welcomeMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 107, Short.MAX_VALUE)))
                .addContainerGap())
        );
        inboxPanelLayout.setVerticalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compose, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        recievePanel.setVisible(false);
        recievePanel.setLayout(null);

        fromEmail.setPreferredSize(new java.awt.Dimension(430, 30));
        recievePanel.add(fromEmail);
        fromEmail.setBounds(109, 11, 430, 30);

        jLabel5.setText("From:");
        recievePanel.add(jLabel5);
        jLabel5.setBounds(25, 11, 66, 26);
        recievePanel.add(fromSubject);
        fromSubject.setBounds(109, 51, 430, 30);

        jLabel6.setText("Subject:");
        recievePanel.add(jLabel6);
        jLabel6.setBounds(25, 48, 66, 26);

        fromMessage.setColumns(20);
        fromMessage.setRows(5);
        jScrollPane2.setViewportView(fromMessage);

        recievePanel.add(jScrollPane2);
        jScrollPane2.setBounds(25, 103, 560, 230);

        reply.setText("Reply");
        reply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replyActionPerformed(evt);
            }
        });
        recievePanel.add(reply);
        reply.setBounds(30, 360, 87, 32);

        cancelButton1.setText("Cancel");
        cancelButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButton1cancelSendClicked(evt);
            }
        });
        recievePanel.add(cancelButton1);
        cancelButton1.setBounds(130, 360, 87, 32);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sendPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(inboxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(recievePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sendPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(inboxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(recievePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMouseClicked
        // TODO add your handling code here:
        yourEmail = email.getText();
        pass = String.valueOf(jPasswordField1.getPassword());
        //set properties 
        Properties properties = new Properties();
        //You can use imap or imaps , *s -Secured
        properties.put("mail.store.protocol", "imaps");
        //Host Address of Your Mail
        properties.put("mail.imaps.host", "imap.gmail.com");
        //Port number of your Mail Host
        properties.put("mail.imaps.port", "993");
        //properties.put("mail.imaps.timeout", "10000");
        try {
            //create a session  
            Session session = Session.getDefaultInstance(properties, null);
            //SET the store for IMAPS
            Store store = session.getStore("imaps");
            System.out.println("Connection initiated......");
            //Trying to connect IMAP server
            store.connect(yourEmail, pass);
            //System.out.println("Connection is ready :)");
            Folder inbox = store.getFolder("inbox");
            inbox.open(Folder.READ_ONLY);
            int messageCount = inbox.getMessageCount();
            //Print Last 20 email information, if string
            for (int i = 0; i < 20; i++) {
                String tmp = "";
                if (inbox.getMessage(messageCount - i).getContent().getClass().isInstance(tmp)) {
                    messageList.add(inbox.getMessage(messageCount - i));
                    stringList.add("From: " + inbox.getMessage(messageCount - i).getFrom()[0]
                            + " Subject: " + inbox.getMessage(messageCount - i).getSubject());
                    texts.add(inbox.getMessage(messageCount - i).getContent().toString());
                }
            }
            inbox.close(true);
            store.close();
            String[] str = new String[stringList.size()];
            int i = 0;
            for (String s : stringList) {
                str[i++] = s;
            }
            jList1.removeAll();
            jList1.setListData(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        inboxPanel.setVisible(true);
        setContentPane(inboxPanel);
        welcomeMsg.setText("Welcome " + yourEmail);
    }//GEN-LAST:event_loginMouseClicked

    private void passBoxClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passBoxClicked
        // TODO add your handling code here:
        jPasswordField1.setText("");
    }//GEN-LAST:event_passBoxClicked

    private void emailClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailClicked
        // TODO add your handling code here:
        email.setText("");
    }//GEN-LAST:event_emailClicked

    private void cancelSendClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelSendClicked
        // TODO add your handling code here:
        subjectTxt.setText("");
        targetEmail.setText("");
        sendMessage.setText("");
        setContentPane(inboxPanel);
    }//GEN-LAST:event_cancelSendClicked

    private void sendClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendClicked
        // TODO add your handling code here:
        boolean tmp = true;
        toEmail = targetEmail.getText();
        subject = subjectTxt.getText();
        message = sendMessage.getText();
        String randChars = generateKey();
        String expChars = "";
        //System.out.println(randChars);
        for (int i = 0; i < 23;) {
            if (i == 4 || i == 10 || i == 16 || i == 22) {
                expChars = expChars + randChars.charAt(i + 1);
                expChars = expChars + randChars.charAt(i);
                expChars = expChars + randChars.charAt(i + 1);
                expChars = expChars + randChars.charAt(i);
                i++;
                i++;
            } else {
                expChars = expChars + randChars.charAt(i);
                i++;
            }
        }
        String newKey = expChars.substring(0, 16);
        String newVector = expChars.substring(16, 32);
        message = message.hashCode() + ";;;;" + message;
        String encryptedMsg = encrypt(message, newKey, newVector);
        String encryptedSub = encrypt(subject, newKey, newVector);
        String sendThisMsg = encrypt(randChars);
        sendThisMsg = sendThisMsg + encryptedMsg;
        try {
            send(yourEmail, pass, toEmail, encryptedSub, sendThisMsg);
        } catch (Exception e) {
            tmp = false;
            sendPopup.showOptionDialog(null, "Message unable to be sent.", "Send", JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE, null, null, null);
            subjectTxt.setText("");
            targetEmail.setText("");
            sendMessage.setText("");
            sendPanel.setVisible(false);
            inboxPanel.setVisible(true);
            setContentPane(inboxPanel);
            e.printStackTrace();
        }
        if (tmp) {
            sendPopup.showOptionDialog(null, "Message was sent.", "Send", JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE, null, null, null);
            subjectTxt.setText("");
            targetEmail.setText("");
            sendMessage.setText("");
            sendPanel.setVisible(false);
            inboxPanel.setVisible(true);
            setContentPane(inboxPanel);
        }
    }//GEN-LAST:event_sendClicked

    private void cancelButton1cancelSendClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButton1cancelSendClicked
        // TODO add your handling code here:
        fromEmail.setText("");
        fromSubject.setText("");
        fromMessage.setText("");
        recievePanel.setVisible(false);
        inboxPanel.setVisible(true);
        setContentPane(inboxPanel);
    }//GEN-LAST:event_cancelButton1cancelSendClicked

    private void composeClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_composeClicked
        // TODO add your handling code here:
        sendPanel.setVisible(true);
        inboxPanel.setVisible(false);
        setContentPane(sendPanel);
    }//GEN-LAST:event_composeClicked

    private void logOutClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutClicked
        // TODO add your handling code here:
        email.setText("Email");
        jPasswordField1.setText("Password");
        //messageList stringList texts
        messageList.clear();
        stringList.clear();
        texts.clear();
        sendPanel.setVisible(false);
        setContentPane(startPanel);
    }//GEN-LAST:event_logOutClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        inboxPanel.setVisible(true);
        targetEmail.setText("");
        subjectTxt.setText("");
        sendMessage.setText("");
        sendPanel.setVisible(false);
        setContentPane(inboxPanel);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void tabbedIntoPass(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabbedIntoPass
        // TODO add your handling code here:
        jPasswordField1.setText("");
    }//GEN-LAST:event_tabbedIntoPass

    private void listClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listClicked
        // TODO add your handling code here:
        int selected = jList1.getSelectedIndex();
        Message sel = (Message) messageList.get(selected);
        String randChars = texts.get(selected).substring(0, 44);
        //System.out.println(randChars);
        //System.out.println(texts.get(selected));
        randChars = decrypt(randChars);
        String afterRandChars = texts.get(selected).substring(44);
        String expChars = "";
        for (int i = 0; i < 23;) {
            if (i == 4 || i == 10 || i == 16 || i == 22) {
                expChars = expChars + randChars.charAt(i + 1);
                expChars = expChars + randChars.charAt(i);
                expChars = expChars + randChars.charAt(i + 1);
                expChars = expChars + randChars.charAt(i);
                i++;
                i++;
            } else {
                expChars = expChars + randChars.charAt(i);
                i++;
            }
        }
        String newKey = expChars.substring(0, 16);
        String newVector = expChars.substring(16, 32);
        try {
            fromEmail.setText(sel.getFrom()[0].toString());
            fromSubject.setText(decrypt(sel.getSubject(), newKey, newVector));
            String helper = decrypt(afterRandChars, newKey, newVector);
            String[] splitStr = helper.split(";;;;");
            helper = splitStr[1];
            int org = parseInt(splitStr[0]);
            //this is just to modify the message to tesh hash mismatch
            //helper = helper.concat(helper);
            int rec = helper.hashCode();
            if (org == rec) {
                //hashes match, verified and autheticated
                helper = helper + "\n" + "\n" + "Verified, Hashes Match\n" + "Original Hash:   "
                        + Base64.getEncoder().encodeToString((org + "").getBytes()) + "\nRecieved Hash: " + Base64.getEncoder().encodeToString((rec + "").getBytes());
            } else {
                //something was modified
                helper = helper + "\n" + "\n" + "This message was tampered with.\n" + "Original Hash: "
                        + Base64.getEncoder().encodeToString((org + "").getBytes()) + "\nRecieved Hash: " + Base64.getEncoder().encodeToString((rec + "").getBytes());
            }
            fromMessage.setText(helper);
        } catch (MessagingException ex) {
            Logger.getLogger(guiJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        inboxPanel.setVisible(false);
        recievePanel.setVisible(true);
        setContentPane(recievePanel);
    }//GEN-LAST:event_listClicked

    private void replyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyActionPerformed
        // TODO add your handling code here:
        targetEmail.setText(fromEmail.getText());
        subjectTxt.setText("RE:" + fromSubject.getText());
        sendMessage.setText("");
        fromEmail.setText("");
        fromSubject.setText("");
        fromMessage.setText("");
        recievePanel.setVisible(false);
        sendPanel.setVisible(true);
        setContentPane(sendPanel);
    }//GEN-LAST:event_replyActionPerformed

    boolean emailTyped = false;
    private void emailTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailTyped
        // TODO add your handling code here:
        if (!emailTyped) {
            emailTyped = true;
            email.setText("");
        }
    }//GEN-LAST:event_emailTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(guiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(guiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(guiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(guiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new guiJFrame().setVisible(true);

            }
        });
    }

    public static String decrypt(String encrypted, String newK, String newV) {
        //Credit: https://www.javacodegeeks.com/2018/03/aes-encryption-and-decryption-in-javacbc-mode.html
        try {
            IvParameterSpec iv = new IvParameterSpec(newV.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(newK.getBytes("UTF-8"), "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
            byte[] original = cipher.doFinal(Base64.getMimeDecoder().decode(encrypted));
            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static String encrypt(String value, String newK, String newV) {
        //Credit: https://www.javacodegeeks.com/2018/03/aes-encryption-and-decryption-in-javacbc-mode.html
        try {
            IvParameterSpec iv = new IvParameterSpec(newV.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(newK.getBytes("UTF-8"), "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static String generateKey() {
        //generate random strings for keys using random bytes and casting to char
        //SecureRandom is cryptographically strong
        byte[] bytes = new byte[24];
        SecureRandom r = new SecureRandom();
        r.nextBytes(bytes);
        String bytesString = "";
        for (int i = 0; i < bytes.length; i++) {
            int tmp = (int) bytes[i] % 94;
            if (tmp < 0) {
                tmp = tmp + 94;
            }
            tmp = tmp + 32;
            bytesString = bytesString + (char) tmp;
        }
        //System.out.println(bytesString);
        return bytesString;
    }

    public static String encrypt(String value) {
        //Credit: https://www.javacodegeeks.com/2018/03/aes-encryption-and-decryption-in-javacbc-mode.html
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static String decrypt(String encrypted) {
        //Credit: https://www.javacodegeeks.com/2018/03/aes-encryption-and-decryption-in-javacbc-mode.html
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));
            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static void send(String from, String pass, String to, String subject, String msg) {
        //taken and modified from https://www.javatpoint.com/example-of-sending-email-using-java-mail-api-through-gmail-server
        //Get properties object    
        Properties props = new Properties();
        String[] tmp = from.split("@");
        String host = "";
        if (tmp[1].equalsIgnoreCase("oswego.edu")) {
            host = "smtp.gmail.com";
        } else {
            host = "smtp." + tmp[1];
        }
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class",
                "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "465");
        //get Session   
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(from, pass);
            }
        });
        //compose message    
        try {
            MimeMessage message = new MimeMessage(session);
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
            message.setSubject(subject);
            message.setText(msg);
            //send message  
            Transport.send(message);
            System.out.println("message sent successfully");
        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgOswego;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JButton compose;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fromEmail;
    private javax.swing.JTextArea fromMessage;
    private javax.swing.JTextField fromSubject;
    private javax.swing.JPanel inboxPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logOut;
    private javax.swing.JButton login;
    private javax.swing.JPanel recievePanel;
    private javax.swing.JButton reply;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea sendMessage;
    private javax.swing.JPanel sendPanel;
    private javax.swing.JOptionPane sendPopup;
    private javax.swing.JPanel startPanel;
    private javax.swing.JTextField subjectTxt;
    private javax.swing.JTextField targetEmail;
    private javax.swing.JLabel welcomeMsg;
    // End of variables declaration//GEN-END:variables
}
